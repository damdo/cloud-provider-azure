// /*
// Copyright The Kubernetes Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// */

// Code generated by client-gen. DO NOT EDIT.
package resourcegroupclient

import (
	"context"

	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/resources/armresources"
	. "github.com/onsi/ginkgo/v2"
	. "github.com/onsi/gomega"
)

func init() {
	additionalTestCases = func() {
		// When("List", func() {
		// 	It("should return a list of resource groups", func() {
		// 		groups, err := realClient.List(context.Background())
		// 		Expect(err).NotTo(HaveOccurred())
		// 		Expect(groups).NotTo(BeEmpty())
		// 	})
		// })
		When("Get", func() {
			It("should return a resource group", func() {
				group, err := realClient.Get(context.Background(), resourceGroupName)
				Expect(err).NotTo(HaveOccurred())
				Expect(*group.Name).To(Equal(resourceGroupName))
			})
		})
		When("CreateOrUpdate", func() {
			It("should create a resource group", func() {
				group, err := realClient.CreateOrUpdate(context.Background(), resourceGroupName+"custom", armresources.ResourceGroup{
					Location: to.Ptr(location),
				})
				Expect(err).NotTo(HaveOccurred())
				Expect(*group.Name).To(Equal(resourceGroupName + "custom"))
			})
		})
		When("Delete", func() {
			It("should delete a resource group", func() {
				err := realClient.Delete(context.Background(), resourceGroupName+"custom")
				Expect(err).NotTo(HaveOccurred())
			})
		})
	}

	beforeAllFunc = func(ctx context.Context) {

	}
	afterAllFunc = func(ctx context.Context) {
	}
}
